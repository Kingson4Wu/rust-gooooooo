Rust编程之道
张汉东
73个笔记
1.1 缘起
 
· 很难编写内存安全的代码。· 很难编写线程安全的代码。
 
 
那个时代计算资源匮乏，大家追求的是性能。所以，大家都宁愿牺牲安全性来换取性能。这也是C/C++得以普及的原因。
 
 
职业编程语言工程师的日常工作就是给其他语言开发编译器和工具集，但并未参与这些语言本身的设计。
 
 
GH认为，未来的互联网除了关注性能，还一定会高度关注安全性和并发性。
 
 
GH对这门语言的期望如下。· 必须是更加安全、不易崩溃的，尤其在操作内存时，这一点更为重要。· 不需要有垃圾回收这样的系统，不能为了内存安全而引入性能负担。· 不是一门仅仅拥有一个主要特性的语言，而应该拥有一系列的广泛特性，这些特性之间又不乏一致性。这些特性可以很好地相互协作，从而使该语言更容易编写、维护和调试，让程序员写出更安全、更高效的代码。
 
 
总而言之，就是可以提供高的开发效率，代码容易维护，性能还能与C/C++媲美，还得保证安全性的一门语言。正是因为GH以这种观点作为基石，才使得今天的Rust成为了一门同时追求安全、并发和性能的现代系统级编程语言。
 
 
互联网发展至今，性能问题已经不再是其发展瓶颈，安全问题才是阻碍其发展的“重疾”。
1.2 设计哲学
 
为了达成目标，Rust语言遵循了三条设计哲学：· 内存安全· 零成本抽象· 实用性
 
 
类型系统提供了以下好处：· 允许编译器侦测无意义甚至无效的代码，暴露程序中隐含的错误。· 可以为编译器提供有意义的类型信息，帮助优化代码。· 可以增强代码的可读性，更直白地阐述开发者的意图。· 提供了一定程度的高级抽象，提升开发效率。
 
 
类型安全是指类型系统可以保证程序的行为是意义明确、不出错的。
 
 
像C/C++语言的类型系统就不是类型安全的，因为它们并没有对无意义的行为进行约束。一个最简单的例子就是数组越界，在C/C++语言中并不对其做任何检查，导致发生了语言规范规定之外的行为，也就是未定义行为（Undefined Behavior）。而这些未定义行为恰恰是漏洞的温床。
 
 
所以，像C/C++这种语言就是类型不安全的语言。Rust语言如果想保证内存安全，首先要做的就是保证类型安全。
 
 
在诸多编程语言中，OCaml 和Haskell 是公认的类型安全的典范，它们的类型系统不仅仅有强大的类型论理论“背书”，而且在实践生产环境中也久经考验。所以，Rust 语言借鉴了它们的类型系统来保证类型安全，尤其是Haskell，你能在Rust语言中看到更多Haskell类型系统的影子。
 
 
类型系统的作用是定义编程语言中值和表达式的类型，将它们归类，赋予它们不同的行为，指导它们如何相互作用
 
 
那么，什么是内存安全呢？简单来说，就是不会出现内存访问错误。
 
 
只有当程序访问未定义内存的时候才会产生内存错误。一般来说，发生以下几种情况就会产生内存错误：· 引用空指针。· 使用未初始化内存。· 释放后使用，也就是使用悬垂指针。· 缓冲区溢出，比如数组越界。· 非法释放已经释放过的指针或未分配的指针，也就是重复释放。
 
 
这些情况之所以会产生内存错误，是因为它们都访问了未定义内存。为了保证内存安全，Rust语言建立了严格的安全内存管理模型：
 
 
· 所有权系统。每个被分配的内存都有一个独占其所有权的指针。只有当该指针被销毁时，其对应的内存才能随之被释放。· 借用和生命周期。每个变量都有其生命周期，一旦超出生命周期，变量就会被自动释放。如果是借用，则可以通过标记生命周期参数供编译器检查的方式，防止出现悬垂指针，也就是释放后使用的情况。
 
 
Rust 从 Haskell 的类型系统那里借鉴了以下特性：· 没有空指针· 默认不可变· 表达式· 高阶函数· 代数数据类型· 模式匹配· 泛型· trait和关联类型· 本地类型推导
 
 
为了实现内存安全，Rust还具备以下独有的特性：· 仿射类型（Affine Type），该类型用来表达Rust所有权中的Move语义。· 借用、生命周期。借助类型系统的强大，Rust编译器可以在编译期对类型进行检查，看其是否满足安全内存模型，在编译期就能发现内存不安全问题，有效地阻止未定义行为的发生。
 
 
内存安全的Bug和并发安全的Bug产生的内在原因是相同的，都是因为内存的不正当访问而造成的。
 
 
同样，利用装载了所有权的强大类型系统，Rust还解决了并发安全的问题。Rust编译器会通过静态检查分析，在编译期就检查出多线程并发代码中所有的数据竞争问题。
 
 
Rust的抽象是零成本的，Rust的抽象并不会存在运行时性能开销，这一切都是在编译期完成的
 
 
。代码清单 1-1 中的迭代 5次的抽象代码，在编译期会被展开成和手写汇编代码相近的底层代码，所以不存在运行时因为解释这一层抽象而产生的性能开销。对于一门系统级编程语言而言，运行时零成本是非常重要的。这一点，Rust做到了。
 
 
Rust中零成本抽象的基石就是泛型和trait
 
 
如何评价一门编程语言的实用性？事实上并没有统一的说法，但可以从以下三个方面进行评判：· 实践性，首先必须能够应用于开发工业级产品，其次要易于学习和使用。· 有益性，是指能够对业界产生积极的效果或影响。· 稳定性，是指语言自身要稳定。在解决同一个问题时，不会因为使用者不同而出现随机的结果。
 
 
那么Rust语言在这三个方面的表现如何呢？实践性Rust已经为开发工业级产品做足了准备。为了保证安全性，Rust引入了强大的类型系统和所有权系统，不仅保证内存安全，还保证了并发安全，同时还不会牺牲性能。
 
 
为了保证支持硬实时系统，Rust从C++那里借鉴了确定性析构、RAII和智能指针，用于自动化地、确定性地管理内存，从而避免了GC的引入，因而就不会有“世界暂停”的问题了。
 
 
这几项虽然借鉴自C++，但是使用起来比C++更加简洁。为了保证程序的健壮性，Rust重新审视了错误处理机制。日常开发中一般有三类非正常情况：失败、错误和异常。但是像C语言这种面向过程的语言，开发者只能通过返回值、goto等语句进行错误处理，并且没有统一的错误处理机制。而C++和Java这种高级语言虽然引入了异常处理机制，但没有专门提供能够有效区分正常逻辑和错误逻辑的语法，而只是统一全局进行处理，导致开发者只能将所有的非正常情况都当作异常去处理，这样不利于健壮系统的开发。并且异常处理还会带来比较大的性能开销。
 
 
Rust语言针对这三类非正常情况分别提供了专门的处理方式，让开发者可以分情况去选择。
 
 
· 对于失败的情况，可以使用断言工具。
 
 
· 对于错误，Rust提供了基于返回值的分层错误处理方式，比如Option＜T＞可以用来处理可能存在空值的情况，而 Result＜T＞就专门用来处理可以被合理解决并需要传播的错误。
 
 
· 对于异常，Rust将其看作无法被合理解决的问题，提供了线程恐慌机制，在发生异常的时候，线程可以安全地退出。
 
 
通过这样精致的设计，开发者就可以从更细的粒度上对非正常情况进行合理处理，最终编写出更加健壮的系统。
 
 
为了和现有的生态系统良好地集成，Rust 支持非常方便且零成本的 FFI 机制，兼容C-ABI，并且从语言架构层面上将Rust语言分成Safe Rust和Unsafe Rust两部分。其中Unsafe Rust专门和外部系统打交道，比如操作系统内核。之所以这样划分，是因为Rust编译器的检查和跟踪是有能力范围的，它不可能检查到外部其他语言接口的安全状态，所以只能靠开发者自己来保证安全。Unsafe Rust提供了unsafe关键字和unsafe块，显式地将安全代码和访问外部接口的不安全代码进行了区分，也为开发者调试错误提供了方便。Safe Rust表示开发者将信任编译器能够在编译时保证安全，而Unsafe Rust表示让编译器信任开发者有能力保证安全。
 
 
有人的地方就有Bug。Rust语言通过精致的设计，将机器可以检查控制的部分都交给编译器来执行，而将机器无法控制的部分交给开发者自己来执行。Safe Rust保证的是编译器在编译时最大化地保障内存安全，阻止未定义行为的发生。Unsafe Rust用来提醒开发者，此时开发的代码有可能引起未定义行为，请谨慎！人和编译器共享同一个“安全模型”，相互信任，彼此和谐，以此来最大化地消除人产生Bug的可能。
 
 
为了让开发者更方便地相互协作，Rust提供了非常好用的包管理器Cargo。Rust代码是以包（crate）为编译和分发单位的，Cargo提供了很多命令，方便开发者创建、构建、分发、管理自己的包。Cargo也提供插件机制，方便开发者编写自定义的插件，
 
 
来满足更多的需求。比如官方提供的rustfmt和clippy工具，分别可以用于自动格式化代码和发现代码中的“坏味道”。
 
 
虽然Rust官方团队做了以上诸多努力，但是目前还有一大部分开发者认为Rust语言学习曲线颇陡。其中最为诟病的就是Rust目前的借用检查系统。这其实是因为Rust语言的设计融合了诸多语言的特点，而当今大部分开发者只是擅长其中一门语言，对其他语言的特性不太了解。C语言的开发者虽然对底层内存管理比较熟悉，但是未必熟悉C++的RAII机制；即使熟悉C++，也未必熟悉Haskell的类型系统；即便熟悉Haskell的类型系统，也未必懂得底层内存管理机制。更不用说内置GC的Java、Ruby、Python等面向对象语言的开发者了。
 
 
要解决这个问题，可以从以下几点出发来学习Rust：· 保持初学者心态。当面对Rust中难以理解的概念时，先不要急于把其他语言的经验套用其上，而应该从Rust的设计哲学出发，去理解如此设计Rust的语言特性的原因，寻找其内在的一致性。· 先学习概念再动手实践。很多传统语言开发者在学习Rust的时候，一上来就开始动手写代码，结果却栽了跟头，连编译都无法通过。看似符合直觉的代码，却因为借用检查而导致编译失败。这是因为Rust编译器在你编写的代码中发现了隐藏的错误，而你却未察觉。所以，其实不是Rust学习曲线陡，而是直接动手写代码的学习方法有问题。
 
 
· 把编译器当作朋友。不要忽略Rust编译器的诊断信息，大多数情况下，这些诊断信息里已经把错误原因阐述得非常明确。这些诊断信息可以帮助你学习Rust，纠正自己的错误认知。
 
 
俗话说得好，逆境也是机遇。正是因为Rust有这些特点，学习Rust的过程也是一次自我提升的过程，能够帮助你成为更好的程序员。
 
 
有益性和稳定性Rust语言解决了内存安全和并发安全的问题，可以极大地提升软件的质量。Rust的诞生为业界提供了一个除C和C++之外的更好的选择。因为Rust是对安全、并发和性能都很看重的语言，它可以用于嵌入式系统、操作系统、网络服务等底层系统，但它并不局限于此，它还可以用于开发上层Web应用、游戏引擎和机器学习，甚至基于WebAssembly 技术还可以开发前端组件。因为高的安全性和不逊于C/C++的性能，Rust也被应用于新的前沿领域，比如区块链技术。
 
 
综上所述，Rust在实践性、有益性和稳定性三方面都做到位了，Rust的实用性毋庸置疑。
1.3 现状与未来
 
Rust语言中的概念分成了4个层次。最底层是安全内存管理层，该层主要是涉及内存管理相关的概念。倒数第二层是类型系统层，该层起到承上启下的作用。类型系统层承载了上层的所有权系统语义和混合编程范式，赋予了Rust语言高级的抽象表达能力和安全性。同时，还保留了对底层代码执行、数据表示和内存分配等操作的控制能力。
 
 
对于开发者而言，只需要掌握类型系统、所有权系统和混合式编程范式即可，不需要操心底层的内存是否安全，因为有编译器和类型系统帮忙处理。
 
 
在这个语言架构之下，人和编译器共用同一套“心智模型”，这样可以极大地保证系统的安全和健壮性。
 
 
Rust 团队维护三个发行分支：稳定版（Stable）、测试版（Beta）和开发版（Nightly）
 
 
。其中稳定版和测试版每6周发布一次。标记为不稳定（Unstable）和特性开关（Feature Gate）的语言特性或标准库特性只能在开发版中使用。
1.4 Rust代码如何执行
 
在进一步学习之前，我们有必要了解一下Rust代码是如何执行的。Rust是跨平台语言，一次编译，到处运行，这得益于LLVM。Rust编译器是一个LLVM编译前端，它将代码编译为LLVM IR，然后经过LLVM编译为相应的平台目标。
1.5 小结
 
Rust语言遵循着内存安全、零成本抽象和实用性三大设计哲学
 
 
Rust语言有别于传统语言的另一点在于，其将开源社区视为语言的一部分。
2.1 Rust语言的基本构成
 
Rust语言主要由以下几个核心部件组成：· 语言规范· 编译器· 核心库· 标准库· 包管理器
 
 
Rust引入了规范化的RFC流程，RFC文档是涵盖了语言特性的设计意图、详细设计、优缺点的完整技术方案
 
 
Rust是一门静态编译型语言
 
 
。Rust官方的编译器叫rustc，负责将Rust源代码编译为可执行文件或其他库文件（.a、.so、.lib、.dll等）。rustc有如下特点：· rustc是跨平台的应用程序，支持UNIX/Linux等类UNIX平台，也支持Windows平台。· rustc支持交叉编译，可以在当前平台下编译出可运行于其他平台上的应用程序和库。
 
 
·
 
 
 rustc 使用 LLVM 作为编译器后端，具有很好的代码生成和优化技术，支持多个目标平台。
 
 
· rustc是用Rust语言开发的，包含在Rust语言源码中。
 
 
Rust语言的语法由核心库和标准库共同提供。其中Rust核心库是标准库的基础。核心库中定义的是Rust语言的核心，不依赖于操作系统和网络等相关的库，甚至不知道堆分配，也不提供并发和I/O。
 
 
可以通过在模块顶部引入＃！[no_std]来使用核心库
 
 
。
 
 
Rust标准库提供应用程序开发所需要的基础和跨平台支持。
 
 
把按一定规则组织的多个rs文件编译后就得到一个包（crate）。包是Rust代码的基本编译单元，也是程序员之间共享代码的基本单元。
 
 
Rust社区的公开第三方包都集中在crates.io网站上面，它们的文档被自动发布到docs.rs网站上。
 
 
但Cargo不仅局限于包管理，它还为Rust生态系统提供了标准的工作流。Cargo 能够管理整个工作流程，从创建项目、运行单元测试和基准测试，到构建发布链接库，再到运行可执行文件，等等。Cargo为开发者提供了极大的方便。
 
 
通过给cargo new命令添加--lib参数，则可以创建用于编写库的项目。
2.2 语句与表达式
 
Rust 中的语法可以分成两大类：语句（Statement）和表达式（Expression）。语句是指要执行的一些操作和产生副作用的表达式。表达式主要用于计算求值。
 
 
语句又分为两种：声明语句（ Declaration statement）和表达式语句（ Expression statement）。
 
 
Rust会为每个crate都自动引入标准库模块，除非使用＃[no_std]属性明确指定了不需要标准库。
 
 
单元类型拥有唯一的值，就是它本身，为了描述方便，将该值称为单元值。单元类型的概念来自OCmal，它表示“没有什么特殊的价值”。
 
 
像这种名字以叹号结尾，并且可以像函数一样被调用的语句，在Rust中叫作宏。
 
 
Rust编译器在解析代码的时候，如果碰到分号，就会继续往后面执行；如果碰到语句，则执行语句；如果碰到表达式，则会对表达式求值，如果分号后面什么都没有，就会补上单元值（）。当遇到函数的时候，会将函数体的花括号识别为块表达式（Block Expression）。块表达式是由一对花括号和一系列表达式组成的，它总是返回块中最后一个表达式的值。因此，对于answer函数来说，它也是一个块表达式，块中的最后一个表达式是宏语句，所以返回单元值（）。对于sum函数来说，其最后一行是一个表达式，因为没有分号，所以直接返回其求值结果。从这个角度来看，可以将Rust看作一切皆表达式。由于当分号后面什么都没有时自动补单元值（）的特点，我们可以将 Rust 中的语句看作计算结果均为（）的特殊表达式。而对于普通的表达式来说，则会得到正常的求值结果。
微信读书